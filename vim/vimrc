"插件安装×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
filetype plugin on " 允许插件
"filetype on                  " 检测文件类型required
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
Bundle 'Valloric/YouCompleteMe'
Bundle 'Lokaltog/vim-powerline'
Bundle 'scrooloose/syntastic'
Bundle 'majutsushi/tagbar'
Bundle 'scrooloose/nerdtree'
Bundle 'marijnh/tern_for_vim'
Bundle 'hallettj/jslint.vim'
Bundle 'lint.vim'
Bundle 'scrooloose/nerdcommenter'
call vundle#end()
filetype plugin indent on     "启动自动补全 required
"×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.html,*.java exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
    "如果文件类型为.sh文件 
    if &filetype == 'sh' 
        call setline(1,"\#########################################################################") 
        call append(line("."), "\# File Name: ".expand("%")) 
        call append(line(".")+1, "\# Author:zxb@zxb-ubuntu-cracker") 
        call append(line(".")+2, "\# mail: zxb@zxb-ubuntu-cracker.com") 
        call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
        call append(line(".")+4, "\#########################################################################") 
        call append(line(".")+5, "\#!/bin/bash") 
        call append(line(".")+6, "")
		elseif &filetype == 'html'
				call setline(1,"<!--****************************************************************************") 
        call append(line("."), "\* File Name: ".expand("%")) 
        call append(line(".")+1, "\* Author:zxb@zxb-ubuntu-cracker") 
        call append(line(".")+2, "\* mail: zxb@zxb-ubuntu-cracker.com") 
        call append(line(".")+3, "\* Created Time: ".strftime("%c")) 
        call append(line(".")+4, "*************************************************************************-->")  
        call append(line(".")+5, "")
        call append(line(".")+6, "<!DOCTYPE html>")
        call append(line(".")+7, "<html>")
        call append(line(".")+8, "	<head>")
        call append(line(".")+9, "		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>")
        call append(line(".")+10, "   <title> </title>")
        call append(line(".")+11, "		<script>")
        call append(line(".")+12, "")
        call append(line(".")+13, "		</script>")
        call append(line(".")+14, "	</head>")
        call append(line(".")+15, "</html>")
    else 
        call setline(1, "/*************************************************************************") 
        call append(line("."), "    > File Name: ".expand("%")) 
        call append(line(".")+1, "    > Author: wengduo") 
        call append(line(".")+2, "    > Mail: 2292466904@qq.com") 
        call append(line(".")+3, "    > Created Time: ".strftime("%c")) 
        call append(line(".")+4, " ************************************************************************/") 
        call append(line(".")+5, "")
    endif
    if &filetype == 'cpp'
        call append(line(".")+6, "#include <iostream>")
        call append(line(".")+7, "#include <cstdio>")
        call append(line(".")+8, "#include <cassert>")
        call append(line(".")+9, "")
        call append(line(".")+10, "int main(int argc,char *argv[])")
        call append(line(".")+11, "{")
        call append(line(".")+12, "	")
        call append(line(".")+13, "	return 0;")
        call append(line(".")+14, "}")
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include <stdio.h>")
        call append(line(".")+7, "#include <assert.h>")
        call append(line(".")+8, "#include <string.h>")
        call append(line(".")+9, "")
        call append(line(".")+10, "int main(int argc,char *argv[])")
        call append(line(".")+11, "{")
        call append(line(".")+12, "	")
        call append(line(".")+13, "	return 0;")
        call append(line(".")+14, "}")
    endif
    "新建文件后，自动定位到文件末尾
    autocmd BufNewFile * normal G
endfunc 

autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

set pastetoggle=<C-d> 
set nocompatible    "取消版本不一致性
set backspace=indent,eol,start  "insert下退格健删除位于行首的空格，断行，进入insert前的位置
set nu          "设置行数
set history=40

noremap <c-g>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q <CR>
set tags=/usr/src/stl/tags
set tags=~/lianxi/suanfa/suanfa/tags
"不要闪烁 
"set novisualbell

" 修改leader键
let mapleader = '\'
let g:mapleader = '\'

"搜索显示
set incsearch
set hlsearch

set showcmd   "显示nomar下的命令

syntax enable "开启彩色 
syntax on    "语法高亮度显示sync fromstart
set magic  "生成魔术

"set cursorline  "高亮当前行
""set nowrap  "不要折行
set wrap
hi Normal  ctermfg=252 ctermbg=none 
"set nobackup   "不生成备份文件
"set noswapfile  "不生成交换文件
"set autowrite  "自动存盘

"括号配对情况, 跳转并高亮一下匹配的括号
set showmatch
"How many tenths of a second to blink when matching brackets
set matchtime=2

"自定义快捷键设置
"innoremap ` <Esc>:
"nnoremap w :wq<CR>
nnoremap q :q!<CR>

"粘贴复制快捷键(必须安装vim-gnome的支持)
vnoremap <leader>y "+y
nmap <leader>p "+p

"鼠标
set mouse=a

"*************************************************************************

"<c-r>忽略警告编译<c-y>进行编译<c-u>进行调试××××××××××××××××××××××××××××××××××××××"

"noremap <c-r> :call CompileRunGccw()<CR>
"function CompileRunGccw()
	"exec "w"
	"if &filetype=='c'
		"exec "!gcc -w % -o %<"
		 "exec "! ./%<"
	"elseif &filetype=='cpp'
		"exec "!g++ -w -std=c++11 % -o %<"
		"exec "! ./%<"
	"endif
"endfunction

noremap <c-y> :call CompileRunGccPthread()<CR>
function CompileRunGccPthread()
	exec "w"
	if &filetype=='c'
		exec "gcc % -o %< -lpthread -levent -lcrypto"
	  exec "! ./%<"
	elseif &filetype=='cpp'
		exec "!g++ % -std=c++11 -o %< -lpthread -levent -lcrypto $(mysql_config --libs --cflags)"
		exec "! ./%<"
	elseif &filetype=='java' 
		exec "!javac %" 
		exec "!java %<"
	elseif &filetype=='sh'
	    :!./%
	endif
endfunction

noremap <c-r> :call CompileRunGcc()<CR>
function CompileRunGcc()
	exec "w"
let expl=system('chromium-browser '.expand("%"))
endfunction

map <c-u> :call Rungdb()<CR>
func! Rungdb()
    exec "w"
	 if &filetype=='c'
    	 exec "!gcc % -g -o %< -lpthread -levent"
    	 exec "!gdb ./%<"
	 elseif &filetype=='cpp'
	     exec "!g++ -std=c++11 % -g -o %< -lpthread -levent"
	     exec "!gdb ./%<"
endfunc

map <c-i> :call Mykdbg()<CR>
func! Mykdbg()
    exec "w"
	 if &filetype=='c'
    	 exec "!gcc % -g -o %< -lpthread -levent"
    	 exec "!kdbg ./%<"
	 elseif &filetype=='cpp'
	 		 exec "!g++ -std=c++11 % -g -o %< -lpthread -levent"
	     exec "!kdbg ./%<"
endfunc

"***************************************************************************************"

" 显示中文帮助************************************************
if version >= 603
  set helplang=cn
  set encoding=utf-8
endif
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8
set langmenu=zh_CN.UTF-8
"**************************************************************************

"自动补全××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
inoremap [cs printf("\n");<ESC>i
inoremap [aa #include <><ESC>i
inoremap [ac {<CR>}<ESC>O
inoremap [ca std::cout << <ESC>i
inoremap [cx class {<CR>private:<CR>protect:<CR>public:<CR>}; <ESC>i
"****************************************************************************

"自动对齐和缩进×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
filetype indent on "针对不同的文件类型采用不同的缩进格式
set autoindent   "vim使用自动对起,也就是把当前行的对起格式应用到下一行
set smartindent	"依据上面的对起格式,智能的选择对起方式
set tabstop=2     "tab键的数为2
set shiftwidth=2  "当行之间交错时使用2个空格
"****************************************************************************


"打开自动定位到最后编辑的位置,需要确认.viminfo当前用户可写**************************
if has("autocmd")
   au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
 endif
"***********************************************************************************

"nmap <leader>bb :Tab /=<CR>
"nmap <leader>bn :Tab /

"tagbar设置***************************************************************************
map <c-b> :TagbarToggle<CR> 
let g:tagbar_autofocus = 1
"************************************************************************************

" NerdTree use <c-e>
let NERDTreeWinPos='left'
let NERDTreeWinSize=31
let NERDTreeChDirMode=1
map <c-e> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"YouCompleteMe*************************************************************************
autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口
"inoremap <expr> <CR> pumvisible() ? "<c-y>" : "<CR>"	"回车即选中当前项
let g:ycm_confirm_extra_conf=1
let g:ycm_show_diagnostics_ui = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
"开启基于tag的补全，可以在这之后添加需要的标签路径  
let g:ycm_collect_identifiers_from_tags_files=1
" 不显示开启vim时检查ycm_extra_conf文件的信息  
let g:ycm_filepath_completion_use_working_dir = 1
"输入第2个字符开始补全
let g:ycm_min_num_of_chars_for_completion=2
"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=longest,menu	
"禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1
"开启语义补全
let g:ycm_seed_identifiers_with_syntax=1	
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"改变g++编译器支持C++11标准
let g:syntastic_cpp_compiler = 'g++'
"设置g++选项支持c++11
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'
"SirVer/ultisnips 代码片断
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<leader><c-j>"
"*************************************************************************************************

"语法报错
let g:syntastic_auto_jump=1
let g:syntastic_check_on_open = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 6
let g:syntastic_check_on_wq=0
let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_enable_highlighting = 0
let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
let g:syntastic_enable_balloons = 1


"字典
function! Mydict()
let expl=system('sdcv -n ' .expand("<cword>"))
	windo if
	\ expand("%")=="diCt-tmp" |
	\ q!|endif
	25vsp diCt-tmp
	setlocal buftype=nofile bufhidden=hide noswapfile
	1s/^/\=expl/
	1
	wincmd p
endfunction
nmap <C-f> :call Mydict()<CR>

"powerline配置*******************************************************************************
let g:Powerline_symbols='unicode'
set laststatus=2
set noshowmode
set t_Co=256
"**************************************************************************************

"如果是新建文件，则将光标定位到末尾
autocmd BufNewFile * normal G 
"********************************************************************************
			
function! InsertHtmlTag()
        let pat = '\c<\w\+\s*\(\s\+\w\+\s*=\s*[''#$;,()."a-z0-9]\+\)*\s*>'
        normal! a>
        let save_cursor = getpos('.')
        let result = matchstr(getline(save_cursor[1]), pat)
        "if (search(pat, 'b', save_cursor[1]) && searchpair('<','','>','bn',0,  getline('.')) > 0)
        if (search(pat, 'b', save_cursor[1]))
           normal! lyiwf>
           normal! a</
           normal! p
           normal! a>
        endif
        :call cursor(save_cursor[1], save_cursor[2], save_cursor[3])
endfunction
inoremap > <ESC>:call InsertHtmlTag()<CR>a
